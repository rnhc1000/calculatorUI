'use strict';

import './styles.css';
import {
    ColDef,
    ColGroupDef,
    GridApi,
    GridOptions,
    ModuleRegistry,
    RowNodeTransaction,
    RowSelectionOptions,
    createGrid,
    ValueFormatterParams,
    ClientSideRowModelModule,
    GridReadyEvent,
    GetRowIdParams
} from "ag-grid-community";
import { AgGridReact } from "ag-grid-react";
import "ag-grid-community/styles/ag-grid.css";
import "ag-grid-community/styles/ag-theme-quartz.css";
import { useCallback, useMemo, useRef, useState } from 'react';
import { IRow } from '../../models/rows';
ModuleRegistry.registerModules([ClientSideRowModelModule]);
import * as recordsService from '../../services/records-services'


export function RecordData() {


    const gridApiRef = useRef<AgGridReact>(null); 
    const [gridApi, setGridApi] = useState(null);
    const [rowData, setRowData] = useState<IRow[]>([]);

    const dateFormatter = (params: ValueFormatterParams): string => {
        return new Date(params.value).toLocaleDateString("en-us", {

            year: "numeric",
            month: "short",
            day: "numeric",
            hour: "numeric",
            minute: "numeric",

        });
    };
    
    const onGridReady = useCallback(() => {

        recordsService.findRecords(0, 1000, 0, 1000)
          .then(response => {
            setRowData(response.data.records);

        })

    }, []);


    const getRowId = useCallback(function (params: GetRowIdParams) {
        return params.data.symbol;
    }, []);

    const reverseItems = useCallback(() => {
        const reversedData = rowData.slice().reverse();
        setRowData(reversedData);
    }, [rowData]);

    function setGroupingEnabled(enabled: boolean, api: GridApi) {
        if (enabled) {
            api.applyColumnState({
                state: [
                    { colId: 'group', rowGroup: true, hide: true },
                    { colId: 'symbol', hide: true },
                ],
            });
        } else {
            api.applyColumnState({
                state: [
                    { colId: 'group', rowGroup: false, hide: false },
                    { colId: 'symbol', hide: false },
                ],
            });
        }
        setItemVisible('groupingOn', !enabled);
        setItemVisible('groupingOff', enabled);
    }

    function setItemVisible(id: string, visible: boolean) {
        const element = document.querySelector('#' + id) as any;
        element.style.display = visible ? 'inline' : 'none';
    }

    const gridOptions = {
        pagination: true,
      }
    
    //   const gridRef = useRef<AgGridReact>(null);

    //   const onGridReady = (params: { api: { resetRowHeights: () => void; }; }) => {
    //     params.api.resetRowHeights();
    //     gridApiRef.current = params.api // <= assigned gridApi value on Grid ready
    // }

    const rowSelection = useMemo(() => {
        return {
            mode: "single",
        };
    }, [])

 

    const [colDefs] = useState<ColDef[]>([

        {
            field: "recordId",
            width: 120,
            filter: true,
            checkboxSelection: true,
            headerTooltip: "Record Id"
        },
        {
            field: "createdAt",
            valueFormatter: dateFormatter,
            width: 200,
            headerTooltip: "Timestamp"

        },
        {
            field: "operandOne",
            width: 150,
            headerTooltip: "First Operand"

        },
        {
            field: "operandTwo",
            width: 150,
            headerTooltip: "Second Operand"


        },
        {
            field: "operator",
            width: 150,
            headerTooltip: "Operator"

        },
        {
            field: "result",
            valueFormatter: (params: ValueFormatterParams) => {
                return params.value.toLocaleString();
            },
            width: 150,
            headerTooltip: "Result"

        },
        {
            field: "cost",
            valueFormatter: (params: ValueFormatterParams) => {
                return "$" + params.value.toLocaleString();
            },
            width: 150,
            headerTooltip: "st"

        },
        {
            field: "username",
            width: 250,
            headerTooltip: "Username"

        },


    ]);

    console.log(colDefs);

    // if (OK) {

    //     recordsService.findRecords(0, 1000, 0, 1000)

    //         .then(response => {

    //             setRowData(response.data.records);
    //             setOK(false);

    //         })

    //         .catch(() => {

    //         })

    // }

      

    const defaultColDef = useMemo<ColDef>(() => {
        return {
            filter: true,
            editable: true,
        };
    }, []);

    const removeSelected = useCallback(() => {
        const selectedRowNodes = gridApiRef.current!.api.getSelectedNodes();
        const selectedIds = selectedRowNodes.map(function (rowNode) {
            return rowNode.id;
        });
        const filteredData = rowData.filter(function (dataItem) {
            return selectedIds.indexOf(dataItem.symbol) < 0;
        });
        setRowData(filteredData);
    }, [rowData]);

    return (
        <div className="container-grid">
            <div
                className={
                    "ag-theme-quartz-dark"
                }

                style={{ width: "100%", height: "77vh" }}
            >
                <div style={{ marginBottom: '5px', minHeight: '30px', backgroundColor: 'none' }}>
                    {/* <button onClick={reverseItems}>Reverse</button> */}
                    <button style={{ backgroundColor: 'blue' }} onClick={removeSelected}>Remove</button>
                </div>

                <AgGridReact
                    // rowSelection={rowSelection}
                    rowData={rowData}
                    columnDefs={colDefs}
                    defaultColDef={defaultColDef}
                    pagination={true}
                    onCellValueChanged={(event) =>
                        console.log(`New Cell Value: ${event.value}`)
                    }
                    getRowId={getRowId}
                    onGridReady={onGridReady}
                />

            </div>
        </div>
    );
};




<AgGridReact
  // ... other grid options
  rowSelection="multiple"
/>
